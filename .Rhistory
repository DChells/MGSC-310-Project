collapse = TRUE,
# change fig.width and fig.height to change the code height and width by default
fig.width = 5.5,
fig.height = 4.5,
fig.align='center')
# Always print this out before your assignment
sessionInfo()
getwd()
library("here")
library("tidyverse")
library("forcats")
library("rsample")
library("ggplot2")
library("ggmap")
library("dplyr")
library("lubridate")
library("xgboost")
bstSparse <- xgboost(data = subset(crashes_train, select = -Severity),
label = crashes_train$Severity,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 2,
objective = "binary:logistic")
crashes_split <- initial_split(crashes_clean, prop = 0.75)
crashes_clean %>%
mutate(wday = wday(Start_Time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
crashes_clean %>%
ggplot(aes(Start_Time_Clean)) + geom_histogram(binwidth = 86400)
# Please leave this code chunk as is. It makes some slight formatting changes to alter the output to be more aesthetically pleasing.
library(knitr)
# Change the number in set seed to your own favorite number
set.seed(1818)
options(width=70)
options(scipen=99)
# this sets text outputted in code chunks to small
opts_chunk$set(tidy.opts=list(width.wrap=50),tidy=TRUE, size = "vsmall")
opts_chunk$set(message = FALSE,
warning = FALSE,
# "caching" stores objects in code chunks and only rewrites if you change things
cache = FALSE,
# automatically downloads dependency files
autodep = TRUE,
#
cache.comments = FALSE,
#
collapse = TRUE,
# change fig.width and fig.height to change the code height and width by default
fig.width = 5.5,
fig.height = 4.5,
fig.align='center')
# Always print this out before your assignment
sessionInfo()
getwd()
library("here")
library("tidyverse")
library("forcats")
library("rsample")
library("ggplot2")
library("ggmap")
library("dplyr")
library("lubridate")
library("xgboost")
crashes <- read.csv(here("datasets", "US_Accidents_Dec20_updated.csv"))
summary(crashes)
crashes_clean <-
crashes %>%
mutate(Start_Time_Clean = ymd_hms(Start_Time),
End_Time_Clean = ymd_hms(End_Time),
Weather_Condition_Clean = as.factor(Weather_Condition),
Wind_Direction_Clean = as.factor(Wind_Direction),
Weather_Timestamp_Clean = ymd_hms(Weather_Timestamp),
State_Clean = as.factor(State),
County_Clean = as.factor(County),
City_Clean = as.factor(City),
Side_Clean = as.factor(Side))
summary(crashes_clean)
qmplot(Start_Lng, Start_Lat, data = crashes, maptype = "toner-lite", color = factor(Severity))
qmplot(End_Lng, End_Lat, data = crashes, maptype = "toner-lite", color = factor(Severity))
crashes_clean %>%
ggplot(aes(Start_Time_Clean)) + geom_histogram(binwidth = 86400)
crashes_clean %>%
mutate(wday = wday(Start_Time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
crashes_split <- initial_split(crashes_clean, prop = 0.75)
crashes_train <- training(crashes_split)
crashes_test <- testing(crashes_split)
bstSparse <- xgboost(data = subset(crashes_train, select = -Severity),
label = crashes_train$Severity,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 2,
objective = "binary:logistic")
y_train <- as.integer(crashes_train$Severity) - 1
y_test <- as.integer(crashes_test$Severity) - 1
X_train <- crashes_train %>% select(-Severity)
X_test <- crashes_test %>% select(-Severity)
xgb_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
sparse_matrix <- sparse.model.matrix(response ~ .-1, data = campaign)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_clean)
library(Matrix)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_clean)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes)
lapply(crashes_clean)
lapply(crashes_clean, unique)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes)
head(crashes)
glimpse(crashes)
dmy <- dummyVars(" ~ .", data = crashes)
library("caret")
install.packages(caret)
install.packages("caret")
library("caret")
dmy <- dummyVars(" ~ .", data = crashes)
dmy
View(dmy)
dmy <- dummyVars(" ~ .", data = crashes)
trsf <- data.frame(predict(dmy))
trsf <- data.frame(predict(dmy, newdata = crashes))
library(data.table)
library(mltools)
install.packages("mltools")
library(data.table)
library(mltools)
library(mltools)
vrashes <- one_hot(as.data.table(crashes))
View(vrashes)
glimpse(vrashes)
vrashes
trsf
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp)
View(crashes_xgb)
vrashes <- one_hot(as.data.table(crashes_xgb))
vrashes
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp) %>%
drop_na()
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
vrashes <- one_hot(as.data.table(crashes_xgb))
vrashes
View(vrashes)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number) %>%
drop_na()
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country) %>%
drop_na()
dum <- c('Side', 'City', 'County', 'State', 'Zip_Code', 'Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight')
dum <- c('Side', 'City', 'County', 'State', 'Zip_Code', 'Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight')
dummies <- dummyVars(~ dum, data = crashes_xgb)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country) %>%
drop_na()
dummies <- dummyVars(~ Side + City + County + State + Zip_Code + Timezone + Wind_Direction + Weather_Condition + Amenity +  Bump + Crossing + Give_Way + Junction + No_Exit + Railway + Roundabout +  Station + Stop + Traffic_Calming + Traffic_Signal + Turning_Loop + Sunrise_Sunset + Civil_Twilight+  Nautical_Twilight + Astronomical_Twilight, data = crashes_xgb)
dum <- c('Side', 'City', 'County', 'State', 'Zip_Code', 'Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight')
dummies <- dummyVars( data = crashes_xgb, ~ Side + City + County + State + Zip_Code + Timezone + Wind_Direction + Weather_Condition + Amenity +  Bump + Crossing + Give_Way + Junction + No_Exit + Railway + Roundabout +  Station + Stop + Traffic_Calming + Traffic_Signal + Turning_Loop + Sunrise_Sunset + Civil_Twilight+  Nautical_Twilight + Astronomical_Twilight)
install.packages('fastDummies')
```{r}
library('fastDummies')
dataf <- dummy_cols(crashes_xgb, select_columns = dum)
dataf <- dummy_cols(crashes_xgb, select_columns = dum, remove_selected_columns = TRUE)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
dum <- c('Side', 'City', 'County', 'State', 'Zip_Code', 'Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight')
dummies <- dummyVars( data = crashes_xgb, ~ Side + City + County + State + Zip_Code + Timezone + Wind_Direction + Weather_Condition + Amenity +  Bump + Crossing + Give_Way + Junction + No_Exit + Railway + Roundabout +  Station + Stop + Traffic_Calming + Traffic_Signal + Sunrise_Sunset + Civil_Twilight+  Nautical_Twilight + Astronomical_Twilight)
dataf <- dummy_cols(crashes_xgb, select_columns = dum, remove_selected_columns = TRUE)
vrashes <- one_hot(as.data.table(crashes_xgb))
vrashes
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
View(sparse_matrix)
y_train <- as.integer(crashes_train$Severity) - 1
xgb_train <- xgb.DMatrix(data = sparse_matrix, label = y_train)
y_train <- as.integer(crashes_xgb$Severity) - 1
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
xgb_train <- xgb.DMatrix(data = sparse_matrix, label = y_train)
xgb <- xgboost(data = xgb_train,
label = y_train,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = xgb_train,
label = y_train,
eta = 0.1,
max_depth = 15,
nround=2,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = xgb_train,
label = y_train,
eta = 0.1,
max_depth = 15,
nround=2,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
sadsa
xgb <- xgboost(data = xgb_train,
label = y_train,
eta = 0.1,
max_depth = 15,
nround=2,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
bstDMatrix <- xgboost(data = xgb_train,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 2,
objective = "binary:logistic")
bstDMatrix <- xgboost(data = xgb_train,
label = y_train
max.depth = 2,
bstDMatrix <- xgboost(data = xgb_train,
label = y_train,
max.depth = 2,
eta = 1,
nthread = 2,
nrounds = 2,
objective = "binary:logistic")
xgb <- xgboost(data = xgb_train,
eta = 0.1,
max_depth = 15,
nround=2,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
y_pred <- predict(xgb)
y_pred <- predict(xgb, newdata = y_test)
y_pred <- predict(xgb, newdata = xgb_train)
print(head(pred))
print(length(pred))
print(length(y_pred))
print(head(y_pred))
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
crashes_train_xbg <- training(crashes_split)
crashes_train_xbg <- training(crashes_split)
crashes_test_xbg <- testing(crashes_split)
sparse_matrix <- sparse.model.matrix(Severity ~ .-1, data = crashes_xgb)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_split)
crashes_train_xbg <- training(crashes_split)
crashes_test_xbg <- testing(crashes_split)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
crashes_train_xbg <- training(crashes_xgb)
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_xgb)
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_xgb)
crashes_test_xbg <- testing(crashes_xgb)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_xgb)
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_split_xgb)
crashes_test_xbg <- testing(crashes_split_xgb)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
sparse_matrix_test <- sparse.model.matrix(Severity ~ .-1, data = crashes_test_xbg)
y_train <- as.integer(crashes_xgb$Severity) - 1
y_test <- as.integer(crashes_test$Severity) - 1
y_train <- as.integer(crashes_train_xbg$Severity) - 1
y_test <- as.integer(crashes_test_xbg$Severity) - 1
xgb_train <- xgb.DMatrix(data = sparse_matrix_train, label = y_train)
xgb_test <- xgb.DMatrix(data = sparse_matrix_test, label = y_test)
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_split_xgb)
crashes_test_xbg <- testing(crashes_split_xgb)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
sparse_matrix_test <- sparse.model.matrix(Severity ~ .-1, data = crashes_test_xbg)
y_train <- as.integer(crashes_train_xbg$Severity) - 1
y_test <- as.integer(crashes_test_xbg$Severity) - 1
xgb_train <- xgb.DMatrix(data = sparse_matrix_train, label = y_train)
xgb_test <- xgb.DMatrix(data = sparse_matrix_test, label = y_test)
xgb <- xgboost(data = xgb_train,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
ui <- fluidPage(
navbarPage("Crashes", id="nav",
tabPanel("MAP",
leafglOutput("map", width="100%", height= 800),
),
)
)
df = st_as_sf(crashes[0:100000,], coords = c("Start_Lng", "Start_Lat"), crs = 4326)
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.DarkMatter) %>%
addGlPoints(data = df, popup = TRUE) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
})
}
y_pred <- predict(xgb, newdata = xgb_test)
y_pred <- predict(xgb, newdata = xgb_test)
y_pred <- predict(xgb, newdata = y_test)
y_pred <- predict(xgb, newdata = xgb_train)
print(length(y_pred))
print(head(y_pred))
xgb.plot.tree(model = xgb$finalModel, trees = 1)
xgb.plot.tree(model = xgb, trees = 1)
install.packages(DiagrammeR )
install.packages('DiagrammeR')
library('DiagrammeR')
library('DiagrammeR')
xgb.plot.tree(model = xgb, trees = 1)
xgb.plot.deepness(model = xgb, trees = 1)
sad
# Please leave this code chunk as is. It makes some slight formatting changes to alter the output to be more aesthetically pleasing.
library(knitr)
# Change the number in set seed to your own favorite number
set.seed(1818)
options(width=70)
options(scipen=99)
# this sets text outputted in code chunks to small
opts_chunk$set(tidy.opts=list(width.wrap=50),tidy=TRUE, size = "vsmall")
opts_chunk$set(message = FALSE,
warning = FALSE,
# "caching" stores objects in code chunks and only rewrites if you change things
cache = FALSE,
# automatically downloads dependency files
autodep = TRUE,
#
cache.comments = FALSE,
#
collapse = TRUE,
# change fig.width and fig.height to change the code height and width by default
fig.width = 5.5,
fig.height = 4.5,
fig.align='center')
library("here")
library("tidyverse")
library("forcats")
library("rsample")
library("ggplot2")
library("ggmap")
library("dplyr")
library("lubridate")
library("xgboost")
library('DiagrammeR')
library('Matrix')
crashes <- read.csv(here("datasets", "US_Accidents_Dec20_updated.csv"))
crashes_xgb <- crashes %>%
select(-ID,
-Description,
-Street,
-Weather_Timestamp,
-Number,
-Airport_Code,
-Country,
-Turning_Loop) %>%
drop_na()
crashes_split_xgb <- initial_split(crashes_xgb, prop = 0.75)
crashes_train_xbg <- training(crashes_split_xgb)
crashes_test_xbg <- testing(crashes_split_xgb)
sparse_matrix_train <- sparse.model.matrix(Severity ~ .-1, data = crashes_train_xbg)
sparse_matrix_test <- sparse.model.matrix(Severity ~ .-1, data = crashes_test_xbg)
y_train <- as.integer(crashes_train_xbg$Severity) - 1
y_test <- as.integer(crashes_test_xbg$Severity) - 1
xgb_train <- xgb.DMatrix(data = sparse_matrix_train, label = y_train)
xgb_test <- xgb.DMatrix(data = sparse_matrix_test, label = y_test)
xgb <- xgboost(data = xgb_train,
eta = 0.1,
max_depth = 15,
nround=15,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
y_pred <- predict(xgb, newdata = xgb_train)
print(length(y_pred))
print(head(y_pred))
err <- mean(as.numeric(pred > 0.5) != test$label)
err <- mean(as.numeric(y_pred > 0.5) != test$label)
err <- mean(as.numeric(y_pred > 0.5))
print(paste("test-error=", err))
xgb.plot.tree(model = xgb, trees = 1)
tree_plot <- xgb.plot.tree(model = xgb, trees = 1)
export_graph(tree_plot, "xgboost_tree_plot.pdf", width = 1000, height = 1000)
tree_plot
tree_plot <- xgb.plot.tree(model = xgb, trees = 1, feature.keep = 3)
tree_plot
importance_matrix <- xgb.importance(agaricus.train$data@Dimnames[[2]], model = xgb)
importance_matrix <- xgb.importance(model = xgb)
xgb.plot.importance(importance_matrix)
xgb.importance(model = xgb)
xgb.importance(model = xgb, trees = 5)
xgb.importance(model = xgb, trees = 1)
importance_matrix <- xgb.importance(xgb_train@Dimnames[[2]],model = xgb)
importance_matrix <- xgb.importance(xgb_train[[2]],model = xgb)
importance_matrix <- xgb.importance(xgb_train[2],model = xgb)
xgb.plot.importance(importance_matrix)
importance_matrix
